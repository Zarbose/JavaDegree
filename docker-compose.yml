version: "3.8"

services:
  java:
    image: zarbose/javadegree-java
    build:
      context: ./java
    container_name: java
    networks:
      - net_Java_Kafka
    depends_on:
      - kafka

  kafka:
    image: zarbose/javadegree-kafka
    build:
      context: ./kafka
    container_name: kafka
    networks:
      - net_Kafka_Prom
      - net_Java_Kafka
    ports:
      - "9094:9094"   # Dev only
      - "12345:12345" # Dev only
    volumes:
      - kafka_data:/bitnami
    environment:
      KAFKA_ENABLE_KRAFT: yes                   # Default
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true # Default
      ALLOW_PLAINTEXT_LISTENER: yes             # Dev only (no SASL_SSL)
      # Do not put hostname (kafka) below when using multi networks, cause Kafka will resolve it with IP of its own interface in FIRST network (by alphabetic order)
      KAFKA_CFG_LISTENERS: INSIDE://:9092,OUTSIDE://:9094,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:9094
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_OPTS: -javaagent:/bitnami/kafka/jmx_prometheus_javaagent.jar=12345:/bitnami/kafka/config/config.yaml

  grafana:
    image: zarbose/javadegree-grafana
    build:
      context: ./grafana
    container_name: grafana
    networks:
      - net_Prom_Graf
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana

  prometheus:
    image: zarbose/javadegree-prometheus
    build:
      context: ./prometheus
    container_name: prometheus
    networks:
      - net_Kafka_Prom
      - net_Prom_Graf
      - net_Prom_NodeExporter
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus

  # EXPORTERS

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    networks:
      - net_Prom_NodeExporter
    ports:
      - "9100:9100" # Dev only
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro

#  kafka-minion:
#    image: redpandadata/kminion:v2.2.3
#    container_name: kafka-minion
#    networks:
#      - net_Kafka_Prom
#    ports:
#      - "8080:8080" # Dev only
#    environment:
#      KAFKA_BROKERS: kafka:9092
#    depends_on:
#      - kafka
#    restart: on-failure

  kafka-exporter:
    image: danielqsj/kafka-exporter
    container_name: kafka-exporter
    networks:
      - net_Kafka_Prom
    ports:
      - "9308:9308" # Dev only
    command:
      - '--kafka.server=kafka:9092'
      - '--kafka.version=3.4.0'
      - '--web.listen-address=:9308'
    depends_on:
      - kafka
    restart: on-failure

networks:
  net_Java_Kafka:
  net_Kafka_Prom:
  net_Prom_Graf:
  net_Prom_NodeExporter:

volumes:
  kafka_data:
  prometheus_data:
  grafana_data:
