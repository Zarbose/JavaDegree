version: "3.8"

services:
  java:
    image: zarbose/javadegree-java
    pull_policy: always
    container_name: java
    networks:
      - net_Java_Kafka
    depends_on:
      - kafka

  kafka:
    image: zarbose/javadegree-kafka
    pull_policy: always
    container_name: kafka
    networks:
      - net_Java_Kafka
      - net_Kafka_Prom
    ports:
      - "9094:9094"   # Dev only
      - "12345:12345" # Dev only
    volumes:
      - kafka_data:/bitnami
    environment:
      KAFKA_ENABLE_KRAFT: yes                   # Default
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true # Default
      ALLOW_PLAINTEXT_LISTENER: yes             # Dev only (no SASL_SSL)
      KAFKA_CFG_LISTENERS: INSIDE://kafka:9092,OUTSIDE://kafka:9094,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:9094
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_OPTS: -javaagent:/bitnami/kafka/jmx_prometheus_javaagent.jar=12345:/bitnami/kafka/config/config.yaml

  prometheus:
    image: zarbose/javadegree-prometheus
    pull_policy: always
    container_name: prometheus
    networks:
      - net_Kafka_Prom
      - net_Prom_Graf
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus

  grafana:
    image: zarbose/javadegree-grafana
    pull_policy: always
    container_name: grafana
    networks:
      - net_Prom_Graf
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana


networks:
  net_Java_Kafka:
  net_Kafka_Prom:
  net_Prom_Graf:

volumes:
  kafka_data:
  prometheus_data:
  grafana_data:
